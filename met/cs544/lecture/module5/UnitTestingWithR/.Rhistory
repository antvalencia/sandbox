test_dir("./tests/testthat/", reporter = "tap")
?test_file
test_file("./tests/testthat/test_strings.r", reporter = "list")
test_file("./tests/testthat/test_strings.r", reporter = "multi")
test_file("./tests/testthat/test_strings.r", reporter = "tap")
students <- data.frame(sid=c(1,1,2,2),
examterm=c(1,2,1,2),
math=c(50,65,75,69),
physics=c(40,45,55,59),
chem=c(70,80,75,78))
students
wide_students <- reshape(students,direction="wide",
idvar="sid",timevar="examterm")
wide_students
long_students <- reshape(wide_students,direction="long",idvar="sid")
long_students
library(reshape)
install.packages("reshape")
library(reshape)
# The new layout of a dataset
# Example of molten data (long form)
molten_students <- melt.data.frame(
students,id.vars=c("sid","examterm"))
molten_students
melt(students,id=c("sid","examterm"),
measured=c("math","physics","chem"))
melt(students,id=c("sid","examterm"))
melt(students,id=c("sid","examterm"),
measured=c("math","physics"))
molten_students <- melt(students,id.vars=c("sid","examterm"))
molten_students
# col vars ~ row vars
cast(molten_students, sid+examterm~variable)
cast(molten_students,...~variable)
cast(molten_students,...~sid)
# Melting by specifying only id variables
cast(molten_students,...~examterm)
install.packages("reshape2")
library(reshape2)
molten_students <- melt(students,id.vars=c("sid","examterm"))
molten_students
dcast(molten_students, sid~variable)
dcast(molten_students, sid+examterm~variable)
dcast(molten_students, sid~variable+examterm)
acast(molten_students, sid~variable)
acast(molten_students, sid+examterm~variable)
acast(molten_students, sid~variable+examterm)
# 3 dimensions
acast(molten_students, sid~examterm~variable)
iris.setosa <- subset(iris,Species=="setosa",
select=c(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width))
iris.versicolor <- subset(iris,Species=="versicolor",
select=c(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width))
iris.virginica <- subset(iris,Species=="virginica",
select=c(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width))
setosa     <- colMeans(iris.setosa)
setosa
versicolor <- colMeans(iris.versicolor)
versicolor
virginica  <- colMeans(iris.virginica)
virginica
# Step 3: Combining results
rbind(setosa=setosa,versicolor=versicolor,virginica=virginica)
iris.split <- split(iris,as.factor(iris$Species))
# Step 2: Applying mean function to calculate mean
iris.apply <- lapply(iris.split, function(x) {colMeans(x[-5])})
iris.apply
# Step 3: Combining results
iris.combine <- do.call(rbind,iris.apply)
iris.combine
library(plyr)
# Split by Species
ddply(iris, .(Species), function(x) {colMeans(x[-5])})
dim(iris3)
dimnames(iris3)
# output as data frame
iris_mean <- adply(iris3, .margins=3, colMeans)
class(iris_mean)
iris_mean
# output as array (matrix)
iris_mean <- aaply(iris3,3,colMeans)
class(iris_mean)
iris_mean
# output as list
iris_mean <- alply(iris3,3,colMeans)
class(iris_mean)
iris_mean
# converting 3 dimensional array to a 2 dimensional data frame
iris_dat <- adply(iris3, .margins=3)
class(iris_dat)
View(iris_dat)
parameter.dat <-
data.frame(n=c(25,50,100,200,400),
mean=c(0,2,3.5,2.5 ,0.1),
sd=c(1,1.5,2,5,2))
# displaying parameter set
parameter.dat
set.seed(12345)
# initialize blank list object to store the generated variable
dat <- list()
for(i in 1:nrow(parameter.dat))
{
dat[[i]] <- rnorm(n=parameter.dat[i,1],
mean=parameter.dat[i,2],sd=parameter.dat[i,3])
}
# estimating mean from the newly generated data
estmean <- lapply(dat,mean)
estmean
# Performing same task as above but this time use plyr package
set.seed(12345)
dat_plyr <- mlply(parameter.dat,rnorm)
library(stringr)
str_c(c(1,2))
str_c(c(1,2), c("a", "b"))
str_c(c(1,2), c("a", "b", "c"))
str_c("Letter: ", letters)
str_c("Letter", letters, sep = ": ")
str_c("Letter", letters)
str_c(letters, " is for", "...")
str_c(letters[-26], " comes before ", letters[-1])
letters[-1]
letters[1]
str_c(letters, collapse = "")
str_c(letters, collapse = ", ")
str_c(c("a", NA, "b"), "-d")
str_length(letters)
str_length(NA)
nchar(NA)
str_length(factor("abc"))
factor("abc")
letters
str_c(letters, collapse = "")
str_length(str_c(letters, collapse = ""))
str_length(c("i", "like", "programming", NA))
hw <- "Hadley Wickham"
str_sub(hw, 1, 6)
str_sub(hw, end = 6)
str_sub(hw, 8, 14)
str_sub(hw, 8)
str_sub(hw, c(1, 8), c(6, 14))
str_c(letters, collapse = "")
str_c(letters, collapse = "") -> x
x
str_sub(x, 1:24, 2:26)
str_sub(x, 1:24, 3:26)
hw
str_sub(hw, -1)
str_sub(hw, -7)
str_sub(hw, end = -7)
x <- "BBCDEF"
str_sub(x, 1, 1)
str_sub(x, 1, 1) <- "A"; x
str_sub(x, -1, -1) <- "K"; x
str_sub(x, -2, -2) <- "GHIJ"; x
str_sub(x, 2, -2) <- ""; x
fruit <- c("apple", "pear", "banana")
str_dup(fruit, 2)
str_dup(fruit, 1:3)
str_dup("na", 0:5)
str_c("ba", str_dup("na", 0:5))
str_trim("  String with trailing and leading white space\t")
str_trim("\n\nString with trailing and leading white space\n\n", side = "right")
str_pad("cs544", 10)
str_pad("hadley", 30, "left"),
str_pad("hadley", 30, "left")
str_pad("hadley", 30, "right")
str_pad("hadley", 30, "both"
)
rbind(
str_pad("hadley", 30, "left"),
str_pad("hadley", 30, "right"),
str_pad("hadley", 30, "both")
)
str_pad(c("a", "abc", "abcdef"), 10)
str_pad("a", c(5, 10, 20))
str_pad("a", 10, pad = c("-", "_", " "))
str_pad("a", 10)
str_pad("a", 10, pad='-')
str_pad("a", 10, pad='#')
str_pad("hadley", 3)
strings <- c(
"apple",
"219733 8965",
"329-293-8753",
"Work: 579-499-7527; Home: 543.355.3679"
)
strings
phone <- "([2-9][0-9]{2})([- .]?)([0-9]{3})([- .])?([0-9]{4})"
str_detect(strings, phone)
x <- 2
x
(x <-2)
(loc <- str_locate(strings, phone))
str_locate_all(strings, phone)
str_extract(strings, phone)
str_extract_all(strings, phone)
str_extract_all(strings, phone, simplify = TRUE)
class(str_extract_all(strings, phone, simplify = TRUE))
str_match(strings, phone)
str_match_all(strings, phone)
str_match_all(strings, phone, simplify=TRUE)
str_replace(strings, phone, "XXX-XXX-XXXX")
str_replace_all(strings, phone, "XXX-XXX-XXXX")
str_locate_all("This is good", "is")
str_locate_all("This is good", "\\bis\\b")
col2hex <- function(col) {
rgb <- col2rgb(col)
rgb(rgb["red", ], rgb["green", ], rgb["blue", ], max = 255)
}
col2hex("red")
col2rgb("red")
col2rgb("pink")
strings <- c("Roses are red, violets are blue", "My favourite colour is green")
colors()
colors <- str_c("\\b", colors(), "\\b", collapse="|")
colors
str_extract_all(strings, colors)
Map(function(string, loc) {
hex <- col2hex(str_sub(string, loc))
str_sub(string, loc) <- hex
string
}, strings, locs)
locs <- str_locate_all(strings, colors)
locs
Map(function(string, loc) {
hex <- col2hex(str_sub(string, loc))
str_sub(string, loc) <- hex
string
}, strings, locs)
matches <- col2hex(colors())
names(matches) <- str_c("\\b", colors(), "\\b")
str_replace_all(strings, matches)
library(testthat)
expect_that(10, equals(4+6))
expect_that(10, equals(as.integer(10)))
expect_that(10, equals(5+6))
expect_equal(10, 4+6)
expect_equal(10, as.integer(10))
expect_equal(10, 5+6)
expect_that(10, is_identical_to(4+6))
expect_equal(10, 4+6)
expect_that(10, is_identical_to(4+6))
expect_that(10, is_identical_to(5+6))
expect_that(10, is_identical_to(as.integer(10)))
expect_identical(10, 4+6)
expect_identical(10, 5+6)
expect_identical(10, as.integer(10))
c("one" = 1, "two" = 2)
c("one" = 1, "two" = 2) -> x
x[1]
x["one"]
expect_that(c("one" = 1, "two" = 2), equals(1:2))
expect_that(c("one" = 1, "two" = 2), is_equivalent_to(1:2))
expect_equivalent(c("one" = 1, "two" = 2), 1:2)
rep(1:5, 1:5)
data <- table(rep(1:5, 1:5))
data
expect_that(data, is_a("table"))
expect_that(data, is_a("data.frame"))
expect_is(data, "table")
string <- "Testing is fun!"
expect_that(string, matches("Testing"))
expect_that(string, matches("fun"))
expect_that(string, matches("testing"))
expect_that(string, matches("T.+ting"))
expect_match(string, "Testing")
# Fails, match is case-sensitive
expect_match(string, "testing")
# Passes
expect_match(string, "testing", ignore.case = TRUE)
a <- list(1:10, letters)
str(a)
a
str(a)
str(a) -> x
x
expect_that(str(a), prints_text("List of 2"))
expect_output(str(a), "List of 2")
expect_output(str(a), "int [1:10]", fixed = TRUE) # match as it is
expect_output(str(a), "int [1:10]", fixed = TRUE) # match as it is
expect_output(str(a), "int [1:11]", fixed = TRUE) # match as it is
log(-1)
expect_that(log(-1), gives_warning())
expect_that(log(-1), gives_warning("NaNs produced"))
log(0)
expect_that(log(0), gives_warning())
1/0
expect_warning(log(-1))
# But always better to be explicit
expect_warning(log(-1), "NaNs produced")
# Failure to produce a warning or error when an error is expected
expect_warning(log(0))
1/2
expect_that(1 / 2, throws_error())
1/"a"
expect_that(1 / "a", throws_error())
expect_that(1 / "a", throws_error("non-numeric argument"))
expect_error(1 / "a")
expect_error(1 / "a", "non-numeric argument")
expect_that( 2 == 2, is_true())
expect_true(2 == 2)
expect_that( 2 == 3, is_false())
expect_false(2 == 3)
setwd("~/BU/MyCourses/CS544/samples/UnitTestingWithR")
test_file("./tests/testthat/test_strings.r", reporter = "tap")
expect_equal(str_length("a"), 1)
test_file("./tests/testthat/test_strings.r", reporter = "tap")
test_dir("./tests/testthat/", reporter = "summary")
n <- 2
n <- n%2  != 0
n%%2
3%%2
4%%2
students <- data.frame(sid=c(1,1,2,2),
examterm=c(1,2,1,2),
math=c(50,65,75,69),
physics=c(40,45,55,59),
chem=c(70,80,75,78))
students
wide_students <- reshape(students,direction="wide",
idvar="sid",timevar="examterm")
wide_students
long_students <- reshape(wide_students,direction="long",idvar="sid")
long_students
library(reshape)
molten_students <- melt.data.frame(
students,id.vars=c("sid","examterm"))
molten_students
students
melt(students,id=c("sid","examterm"),
measured=c("math","physics","chem"))
molten_students <- melt(students,id.vars=c("sid","examterm"))
molten_students
cast(molten_students, sid+examterm~variable)
cast(molten_students,...~variable)
cast(molten_students,...~sid)
cast(molten_students,...~examterm)
library(reshape2)
molten_students <- melt(students,id.vars=c("sid","examterm"))
molten_students
dcast(molten_students, sid~variable)
dcast(molten_students, sid+examterm~variable)
dcast(molten_students, sid~variable+examterm)
acast(molten_students, sid~variable)
acast(molten_students, sid+examterm~variable)
acast(molten_students, sid~variable+examterm)
acast(molten_students, sid~examterm~variable)
View(iris)
iris.setosa <- subset(iris,Species=="setosa",
select=c(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width))
iris.versicolor <- subset(iris,Species=="versicolor",
select=c(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width))
iris.virginica <- subset(iris,Species=="virginica",
select=c(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width))
View(iris.setosa)
setosa     <- colMeans(iris.setosa)
setosa
versicolor <- colMeans(iris.versicolor)
versicolor
virginica  <- colMeans(iris.virginica)
virginica
rbind(setosa=setosa,versicolor=versicolor,virginica=virginica)
iris$Species
iris.split <- split(iris,as.factor(iris$Species))
iris.apply <- lapply(iris.split, function(x) {colMeans(x[-5])})
iris.apply
iris.combine <- do.call(rbind,iris.apply)
iris.combine
library(plyr)
ddply(iris, .(Species), function(x) {colMeans(x[-5])})
dim(iris3)
dimnames(iris3)
iris_mean <- adply(iris3, .margins=3, colMeans)
class(iris_mean)
iris_mean
iris_mean <- aaply(iris3,3,colMeans)
class(iris_mean)
iris_mean
iris_mean <- alply(iris3,3,colMeans)
class(iris_mean)
iris_mean
iris_dat <- adply(iris3, .margins=3)
class(iris_dat)
View(iris_dat)
parameter.dat <-
data.frame(n=c(25,50,100,200,400),
mean=c(0,2,3.5,2.5 ,0.1),
sd=c(1,1.5,2,5,2))
parameter.dat
set.seed(12345)
# initialize blank list object to store the generated variable
dat <- list()
for(i in 1:nrow(parameter.dat))
{
dat[[i]] <- rnorm(n=parameter.dat[i,1],
mean=parameter.dat[i,2],sd=parameter.dat[i,3])
}
estmean <- lapply(dat,mean)
estmean
set.seed(12345)
dat_plyr <- mlply(parameter.dat,rnorm)
estmean_plyr <- llply(dat_plyr,mean)
estmean_plyr
auto <- read.csv("http://kalathur.com/cs544/data/auto-mpg.csv",
stringsAsFactors=FALSE)
View(auto)
table(auto$cylinders)
auto$cylinders <- factor(auto$cylinders, levels = c(3,4,5,6,8), labels = c("3cyl", "4cyl", "5cyl", "6cyl", "8cyl"))
ddply(auto, "cylinders", function(df) mean(df$mpg))
ddply(auto, ~ cylinders, function(df) mean(df$mpg))
ddply(auto, .(cylinders), function(df) mean(df$mpg))
ddply(auto, c("cylinders","model_year"), function(df) c(mean=mean(df$mpg), min=min(df$mpg), max=max(df$mpg)))
ddply(auto, ~ cylinders + model_year, function(df) c(mean=mean(df$mpg), min=min(df$mpg), max=max(df$mpg)))
ddply(auto, .(cylinders, model_year), function(df) c(mean=mean(df$mpg), min=min(df$mpg), max=max(df$mpg)))
auto <- ddply(auto, .(cylinders), transform, mpg.deviation = round(mpg - mean(mpg),2))
head(auto)
ddply(auto, .(cylinders), summarize, freq=length(cylinders), meanmpg=mean(mpg))
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("nycflights13")
class(flights)
library(dplyr)
library(nycflights13)
# https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html
class(flights)
View(flights)
dim(flights)
names(flights)
head(flights)
head(flights)
filter(flights, month == 1, day == 1)
filter(flights, month == 1 | month == 2)
slice(flights, 1:10)
arrange(flights, year, month, day)
arrange(flights, desc(arr_delay))
arrange(flights, desc(arr_delay))
select(flights, year, month, day)
select(flights, year:day)
select(flights, -(year:day))
select(flights, tail_num = tailnum)
rename(flights, tail_num = tailnum)
distinct(select(flights, carrier))
distinct(select(flights, tailnum))
distinct(select(flights, origin, dest))
mutate(flights,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60)
transmute(flights,
gain = arr_delay - dep_delay,
gain_per_hour = gain / (air_time / 60))
summarise(flights,
delay = mean(dep_delay, na.rm = TRUE))
sample_n(flights, 10)
sample_frac(flights, 0.001)
by_tailnum <- group_by(flights, tailnum)
by_tailnum
delay <- summarise(by_tailnum,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
delay
delay <- filter(delay, count > 20, dist < 2000)
delay
destinations <- group_by(flights, dest)
summarise(destinations,
planes = n_distinct(tailnum),
flights = n())
daily <- group_by(flights, year, month, day)
(per_day   <- summarise(daily, flights = n()))
(per_month <- summarise(per_day, flights = sum(flights)))
(per_year  <- summarise(per_month, flights = sum(flights)))
filter(iris,Species=="virginica")
filter(iris,Species=="virginica" &  Sepal.Length<6  & Sepal.Width<=2.7)
slice(iris, 1:10)
slice(iris, 140:150)
slice(iris, 95:105)
arrange(iris, Sepal.Length)
arrange(iris, Sepal.Length, Sepal.Width)
arrange(iris, Sepal.Length, desc(Sepal.Width))
select(iris, Species, Sepal.Length, Sepal.Width)
mutate(iris, SLm=Sepal.Length/100, SWm= Sepal.Width/100, PLm=Petal.Length/100, PWm= Petal.Width/100 )
distinct(iris,Species,Petal.Width)
summarise(iris, meanSL=mean(Sepal.Length),
meanSW=mean(Sepal.Width),
meanPL=mean(Petal.Length),
meanPW=mean(Petal.Width))
iris.grouped<- group_by(iris, Species)
summarize(iris.grouped, count=n(),
meanSL= mean(Sepal.Length),
meanSW=mean(Sepal.Width),
meanPL=mean(Petal.Length),
meanPW=mean(Petal.Width))
iris
iris.grouped<- group_by(iris, Species)
iris.grouped.selected<- select(iris.grouped, Sepal.Length, Sepal.Width)
iris.grouped.selected.summarised<- summarise(iris.grouped.selected,
meanSL=mean(Sepal.Length),
sdSL=sd(Sepal.Length),
meanSW= mean(Sepal.Width),
sdSW= sd(Sepal.Width))
filter(iris.grouped.selected.summarised, meanSL==max(meanSL) | meanSW==max(meanSW))
iris %>%
group_by( Species) %>%
select(Sepal.Length, Sepal.Width)   %>%
summarise( meanSL=mean(Sepal.Length),
sdSL=sd(Sepal.Length),
meanSW= mean(Sepal.Width),
sdSW= sd(Sepal.Width)) %>%
filter(meanSL==max(meanSL) | meanSW==max(meanSW))
install.packages("tidy")
library(tidyr)
